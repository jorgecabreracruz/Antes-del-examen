// Primeros pasos
git clone https://github.com/rafaeldrs/practicaEGC1.git
cd practicaEGC1/
ls
git config --global user.name "rafael"
git config --global user.email "rafael@us.es"

// Preparar claves
ssh-keygen
en carpeta admin -> cd .ssh
cat github_rsa

// Moverse entre carpetas 
cd practicaEGC1/
cd .git/
cd ..
cd ~

// Crear carpeta
mkdir nombrecarpeta

// Abrir archivos
// Nota: usar tab tras escribir una letra para autocompletar
// Usar 'nombre archivo con espacios.py' si el archivo tuviera espacios
Crear -> touch webpage.html
Con bloc de notas -> notepad webpage.html
Con programa por defecto -> start webpage.html
Para mostrar en consola -> cat nombrearchivo

// Configuracion de git
cat .git/config 
git config -l
git config --global core.editor "gitpad"
git config --global core.editor "'C:\Program Files (x86)\Notepad++\notepad++.exe' -multiInst -notabbar -nosession -noPlugin"


// Untracked files
Eliminar archivos untracked -> git clean -f (con opciones -i por ejemplo)

// Tracked modified files
descartar todos los cambios en working directory -> git reset --hard
nota: antes de git reset --hard quizas se quiera hacer: git stash, y posteriormente git stash pop
esto permite usar la pila para no perder los ultimos cambios

descartar cambios -> git checkout <codigoCommi> nombrefile
subir cambios -> git add nombrefile
dejar cambios pero quitarlos del stagging -> git reset HEAD nombrefile

// Añadido/Borrado de archivos
o -> git add nombrearchivo
o -> git rm nombrearchivo
para revertir -> git reset HEAD nombrefile

git commit -a
git reset HEAD^

// Movimiento entre commits
git checkout <commit code>
git checkout master
// Tras realizar un git checkout a un commit antiguo, debes crear una nueva rama ya que sino
// tendrias "HEAD detached from <codigoCommit>" y no podrías hacer push a ningun sitio en concreto

// Respecto al repositorio remoto
revertir todos los commit respecto al remoto -> git reset HEAD^
revertir dos commits respecto al remoto -> git reset HEAD-2
git push origin master (<--- repositorio remoto de referencia y rama remota de referencia)
git pull --rebase 
git pull (se baja lo que hay en el repo y le aplica tus cambios encima, puede provocar conflictos)

// Si nos arrepentimos tras hacer commit
en local y HEAD -> git commit --amend
en local y no HEAD -> git rebase -i commitcode^ <-- importante el ^
luego modificar la linea del commit deseado donde pone pick por e
posteriormente hacer git rebase --continue
git revert commitcode


// Ver el estado de los cambios del repositorio
estado del repo y posibles acciones -> git status
estado de archivos respecto HEAD antes de commit -> git diff HEAD
git diff HEAD..CommitCode (te dice los cambios entre los dos)
datos de log -> git log (--oneline para mostrar titulo solo) (Q para hacer quit)
ver los cambios de un commit concreto -> git show codigoCommit
ver cambios de un archivo -> git annotate nombrefile

//Exportar cambios al repositorio
si no has hecho commit -> git diff HEAD > fichero-salida.patch
si has hecho commit -> git format-patch -1 HEAD (donde -1 es el numero de commits y HEAD el codigo commit a partir de donde)
si tienes el patch y quieres aplicarlo -> git am nombrepatch
si ha fallado el patch y quieres abortarlo -> git am --abort

// Archivos especiales
.gitignore: es un archivo que permite ignorar ciertos archivos
.gitkeep: es solo un placeholder. No hace nada. Sirve para que se guarde una carpeta "vacia" en github.

// Resolución de conflictos
Si está detached (HEAD detached from codigoCommit) -> significa que lo que estas trabajando es una rama
fuera de referencia simbolica, de manera que la solucion es crear una rama temporal, poner los cambios en ella
luego hacer merge ambas ramas y posteriormente eliminar la rama temporal
ejemplo: 
Crear rama temporal -> git branch temp 
Asociar tu working directory con la rama -> git checkout temp
Comprobar la rama en la que te encuentras -> git branch

// Crear rama en repo remoto
git push origin temp
comprobar ramas en que te encuentras y las del repo remoto -> git branch -a
eliminar rama del repositorio remoto -> git push origin :temp
eliminar rama del repositorio local -> git branch -d temp

// Comparamos la rama temporal con el master 
git log --graph --decorate --pretty=oneline --abbrev-commit master origin/master temp
git diff master temp
git diff origin/master temp

// Fusionar ambas ramas
git branch -f master temp
git checkout master

// Eliminamos la rama temporal
git branch -d temp

// Probar a hacer push
git push origin master

// Si se producen conflictos no dejara, y tendras que hacer lo siguiente (muy probable)
git pull 
start archivo que ha dado conflictos, y resolverlos
git add, commit y push finalmente


// Otros:
// Crear alias para abrir el notepad++ desde la consola de git escribiendo "npp"
https://gist.github.com/rogerwalt/7300568
# create profile
New-Item -path $profile -type file -force

# open it with notepad
notepad $profile

# add alias to notepad++ to it
Set-Alias npp "C:\Program Files (x86)\Notepad++\notepad++.exe"